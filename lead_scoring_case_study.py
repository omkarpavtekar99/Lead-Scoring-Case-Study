# -*- coding: utf-8 -*-
"""Lead Scoring Case Study.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bawYnq76Koy9I8pm59CZKf3az4ixvDcP
"""

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Load the merged dataset
df = pd.read_csv('Leads.csv')

# Display the first few rows of the dataframe to understand its structure
print(df.head())

# Drop columns that are not useful for the model
# These columns are either identifiers or contain information that is not relevant for prediction
df.drop(['Prospect ID', 'Lead Number', 'Lead Origin', 'Lead Source', 'Do Not Email', 'Do Not Call', 'Last Activity', 'Country', 'City', 'Last Notable Activity'], axis=1, inplace=True)

# Handle missing values by filling them with a placeholder value
# This ensures that the model can handle missing data without errors
df.fillna('Unknown', inplace=True)

# Convert categorical variables into dummy/indicator variables
# This step is necessary for the logistic regression model to process categorical data
df = pd.get_dummies(df, drop_first=True)

# Define the feature variables (X) and the target variable (y)
# 'Converted' is the target variable we want to predict
X = df.drop('Converted', axis=1)
y = df['Converted']

# Split the dataset into training and testing sets
# 80% of the data is used for training and 20% for testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the logistic regression model
# Logistic regression is chosen for its simplicity and effectiveness in binary classification
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate the accuracy of the model
# Accuracy is a common metric to evaluate classification models
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy}')

# Print the classification report
# This report provides detailed metrics such as precision, recall, and F1-score
print(classification_report(y_test, y_pred))

# Predict probabilities for each lead in the dataset
# The probabilities are used to assign lead scores between 0 and 100
lead_scores = model.predict_proba(X)[:, 1] * 100

# Add the lead scores to the original dataframe
df['Lead Score'] = lead_scores

# Save the dataframe with lead scores to a new CSV file
df.to_csv('Leads_with_Scores.csv', index=False)

print("Lead scores have been successfully assigned and saved to Leads_with_Scores.csv.")

# Visualize the distribution of lead scores
# This helps to understand the spread and concentration of lead scores
plt.figure(figsize=(10, 6))
sns.histplot(df['Lead Score'], bins=30, kde=True)
plt.title('Distribution of Lead Scores')
plt.xlabel('Lead Score')
plt.ylabel('Frequency')
plt.show()

